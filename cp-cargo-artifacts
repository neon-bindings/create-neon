#!/usr/bin/env node

"use strict";

const { dirname } = require("path");
const { copyFile, mkdir } = require("fs");
const readline = require("readline");

const outputFiles = parseArgs(process.argv.slice(2));

const rl = readline.createInterface({ input: process.stdin });

rl.on("line", (line) => {
    try {
        processCargoBuildLine(line);
    } catch (err) {
        console.error(err);
    }
});

function processCargoBuildLine(line) {
    const data = JSON.parse(line);

    if (!data || data.reason !== "compiler-artifact" || !data.target) {
        return;
    }

    const outputFile = outputFiles[data.target.name];
    const { kind } = data.target;

    if (!outputFile || !Array.isArray(data.filenames)) {
        return;
    }

    if (!Array.isArray(kind) || !kind.includes("cdylib")) {
        return;
    }

    const [filename] = data.filenames;

    if (!filename) {
        return;
    }

    mkdir(dirname(outputFile), { recursive: true }, (err) => {
        if (err) {
            return console.error(err);
        }

        copyFile(filename, outputFile, (err) => {
            if (err) {
                console.error(err);
            }
        });
    });
}

function parseArgs(args) {
    return args
        .map((arg, i, arr) => [arg, arr[i + 1]])
        .filter(([arg]) => arg === "-o")
        .map(([, arg]) => parseOutputArgs(arg))
        .reduce((acc, { target, output }) => Object.assign(acc, {
            [target]: output
        }), {})
}

function printUsage() {
    console.error("Expected arguments: -o [crate name]=[output file]");
    process.exit(-1);
}

function parseOutputArgs(arg) {
    if (!arg) {
        return printUsage();
    }

    const splitAt = arg.indexOf("=");
    const target = arg.slice(0, splitAt);
    const output = arg.slice(splitAt + 1);

    if (splitAt < 0 || !target || !output) {
        return printUsage();
    }

    return { target, output };
}
